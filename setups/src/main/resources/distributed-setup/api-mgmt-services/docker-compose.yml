version: '3.3'
services:
  mysql:
    image: 'mysql:${docker-compose.api-mgmt.mysql.version}'
    container_name: mysql
    environment:
      - 'MYSQL_DATABASE=keycloak'
      - 'MYSQL_USER=keycloak'
      - 'MYSQL_PASSWORD=${MYSQL_PASSWORD}'
      - 'MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}'
    volumes:
      - type: volume
        source: mysql_data
        target: /var/lib/mysql
      - type: volume
        source: mysql_logs
        target: /var/log/mysql
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "10"
        mode: non-blocking
    restart: always
  keycloak:
    image: 'api-mgmt/keycloak:${docker-compose.api-mgmt.keycloak.version}'
    container_name: keycloak
    environment:
      - 'DB_ADDR=mysql'
      - 'DB_PASSWORD=${MYSQL_PASSWORD}'
      - 'DB_VENDOR=mysql'
      - 'KEYCLOAK_USER=${KEYCLOAK_ADMIN_USERNAME}'
      - 'KEYCLOAK_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD}'
      - 'KEYCLOAK_IMPORT=/opt/api-mgmt/keycloak-default-realm.json'
      - 'JDBC_PARAMS=useSSL=false' # No need for SSL between MySQL <-> Keycloak in a docker network
      # Following variables are used to create self-signed certificates
      - 'ENDPOINT=${ENDPOINT}'
      - 'TRUSTSTORE_KEYSTORE_PASSWORD=${TRUSTSTORE_KEYSTORE_PASSWORD}'
      - 'TLS_ALLOWED_PROTOCOLS=${TLS_ALLOWED_PROTOCOLS:-}'
    ports:
      - '${KEYCLOAK_PORT}:8443'
    depends_on:
      - mysql
    volumes:
      - type: volume
        source: keycloak_logs
        target: /opt/jboss/keycloak/standalone/log
      - type: bind
        source: ./../../configs/tls.crt
        target: /etc/x509/https/tls.crt
      - type: bind
        source: ./../../configs/tls.key
        target: /etc/x509/https/tls.key
      # Following mount is used to create self-signed certificates
      - type: bind
        source: ./../../configs
        target: /configs
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "10"
        mode: non-blocking
    restart: always
  elasticsearch:
    image: 'elasticsearch:${docker-compose.api-mgmt.elasticsearch.version}'
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - ES_JAVA_OPTS=-Xms${ELASTICSEARCH_JAVA_MEMORY} -Xmx${ELASTICSEARCH_JAVA_MEMORY}
      - VIRTUAL_HOST=${ENDPOINT}
      - VIRTUAL_PORT=9200
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
      nproc:
        soft: 4096
        hard: 4096
    volumes:
      - type: volume
        source: elasticsearch_data
        target: /usr/share/elasticsearch/data
    depends_on:
      - nginx-proxy
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "10"
        mode: non-blocking
    restart: always
  ui:
    image: 'api-mgmt/ui:${docker-compose.api-mgmt.ui.version}'
    container_name: ui
    environment:
      - >-
        CATALINA_OPTS=-Dbridge.urls=${BRIDGE_URL}
        -Dbridge.username=${BRIDGE_USERNAME}
        -Dbridge.password=${BRIDGE_PASSWORD}
        -Dbridge.ports=${BRIDGE_PORT}
        -Dapiman.es.protocol=http
        -Dapiman.es.port=9200
        -Dapiman.es.timeout=10000
        -Dapiman.es.host=elasticsearch
        -Dkeycloak.realm=apiman
        -Dkeycloak.host=${ENDPOINT}
        -Dkeycloak.port=${KEYCLOAK_PORT}
        -Dkeycloak.truststore-password='${TRUSTSTORE_KEYSTORE_PASSWORD}'
        -Dkeycloak.apiman.secret=${KEYCLOAK_APIMAN_SECRET}
        -Dkeycloak.apimanui.secret=${KEYCLOAK_APIMANUI_SECRET}
        -DkeystorePassword='${TRUSTSTORE_KEYSTORE_PASSWORD}'
        -DallowSelfSigned=${SELF_SIGNED}
        -Dtomcat-sslEnabledProtocols=${TLS_ALLOWED_PROTOCOLS:-TLSv1.1,TLSv1.2}
        -Dallowed_cors_origins=https://${ENDPOINT}:${DEV_PORTAL_PORT}
        -Dapiman-manager-ui.keycloak-endpoint=https://${ENDPOINT}:${KEYCLOAK_PORT}
        -Dapiman-manager-ui.devportal-endpoint=https://${ENDPOINT}:${DEV_PORTAL_PORT}
        -Dapiman-manager-ui.kibana-endpoint=https://${ENDPOINT}:${KIBANA_PORT}
    ports:
      - '${UI_PORT}:8443'
    depends_on:
      - elasticsearch
      - keycloak
    volumes:
      - type: volume
        source: ui_logs
        target: /usr/local/tomcat/logs
      - type: bind
        source: ./../../configs/apiman.jks
        target: /usr/local/tomcat/conf/apiman.jks
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "10"
        mode: non-blocking
    restart: always
  elasticsearch-proxy:
    image: 'api-mgmt/elasticsearch-proxy:${docker-compose.api-mgmt.elasticsearch-proxy.version}'
    container_name: elasticsearch-proxy
    # Create a user for nginx proxy if es-users.htpasswd has not more than one line (comment), then run the default entrypoint and cmd from jwilder/nginx-proxy Dockerfile
    entrypoint: ["sh", "-c", "if [ $$(wc -l < /etc/nginx/htpasswd/${ENDPOINT}) -le 1 ]; then echo ${ELASTICSEARCH_USERNAME}:$$(openssl passwd -crypt ${ELASTICSEARCH_PASSWORD}) >> /etc/nginx/htpasswd/${ENDPOINT}; fi && /app/docker-entrypoint.sh forego start -r"]
    ports:
      - '${ELASTICSEARCH_PORT}:443'
    volumes:
      - type: bind
        source: /var/run/docker.sock
        target: /tmp/docker.sock
        read_only: true
      - type: bind
        source: ./../../configs/tls.key
        target: /etc/nginx/certs/${ENDPOINT}.key
      - type: bind
        source: ./../../configs/tls.crt
        target: /etc/nginx/certs/${ENDPOINT}.crt
      - type: bind
        source: ./../../configs/nginx-proxy/es-users.htpasswd
        target: /etc/nginx/htpasswd/${ENDPOINT}
      - type: bind
        source: ./../../configs/nginx-proxy/nginx.conf
        target: /etc/nginx/conf.d/my_proxy.conf
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "10"
        mode: non-blocking
    restart: always
  kibana:
    image: 'kibana:${docker-compose.api-mgmt.kibana.version}'
    container_name: kibana
    depends_on:
      - elasticsearch
      - kibana-proxy
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "10"
        mode: non-blocking
    restart: always
  kibana-proxy:
    image: 'keycloak/keycloak-gatekeeper:${docker-compose.api-mgmt.keycloak-gatekeeper.version}'
    container_name: kibana-proxy
    depends_on:
      - keycloak
    entrypoint:
      - /opt/keycloak-gatekeeper
      - --listen=0.0.0.0:443
      - --upstream-url=http://kibana:5601
      - --client-id=kibana
      - --client-secret=${KEYCLOAK_KIBANA_SECRET}
      - --discovery-url=https://${ENDPOINT}:${KEYCLOAK_PORT}/auth/realms/apiman
      - --skip-openid-provider-tls-verify=${SELF_SIGNED}
      - --enable-refresh-tokens=true
      - --tls-cert=/opt/tls.crt
      - --tls-private-key=/opt/tls.key
      - --enable-encrypted-token=true
      - --enable-authorization-cookies=false
      - --enable-authorization-header=false
      - --encryption-key=${KIBANA_ENCRYPTION_KEY}
      - --resources=uri=/*|roles=kibanauser
    ports:
      - '${KIBANA_PORT}:443'
    volumes:
      - type: bind
        source: ./../../configs/tls.crt
        target: /opt/tls.crt
      - type: bind
        source: ./../../configs/tls.key
        target: /opt/tls.key
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "10"
        mode: non-blocking
    restart: always
  devportal:
    image: 'api-mgmt/devportal:${docker-compose.api-mgmt.devportal.version}'
    container_name: devportal
    environment:
      - 'API_MGMT_UI_REST_URL=https://${ENDPOINT}:${UI_PORT}/apiman'
      - 'KEYCLOAK_AUTH_URL=https://${ENDPOINT}:${KEYCLOAK_PORT}/auth'
      - 'KEYCLOAK_REALM=apiman'
    ports:
      - '${DEV_PORTAL_PORT}:443'
    depends_on:
      - keycloak
      - ui
    volumes:
      - type: bind
        source: ./../../configs/tls.crt
        target: /etc/ssl/certs/tls.crt
      - type: bind
        source: ./../../configs/tls.key
        target: /etc/ssl/private/tls.key
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "10"
        mode: non-blocking
    restart: always
volumes:
  mysql_data:
    driver: local
  mysql_logs:
    driver: local
  keycloak_logs:
    driver: local
  elasticsearch_data:
    driver: local
  ui_logs:
    driver: local
